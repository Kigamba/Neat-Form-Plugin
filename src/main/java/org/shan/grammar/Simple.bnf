{
    // Name and the location of the parser which will be generated.
    parserClass="org.shan.parser.SimpleParser"
    parserUtilClass="org.shan.parser.SimpleParserUtil"

    // All nodes will extend this class. This wraps AST node to a PSI node.
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    // Prefix for all generated classes.
    psiClassPrefix="Simple"
    // Suffix for implementation classes.
    psiImplClassSuffix="Impl"

    // Location to be used when generating PSI classes.
    psiPackage="org.shan.psi"
    // Location to be used when generating PSI implementation classes.
    psiImplPackage="org.shan.psi.impl"

    // Element type holder class name. This class will be used extensively throughout the tutorial.
    elementTypeHolderClass="org.shan.psi.SimpleTypes"

    // Class which will be used to create internal nodes.
    elementTypeClass="org.shan.psi.SimpleElementType"

    // Class which will be used to create leaf nodes.
    tokenTypeClass="org.shan.psi.SimpleTokenType"
    psiImplUtilClass="org.shan.psi.impl.SimplePsiImplUtil"

    tokens = [
        //IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
        space ='regexp:\s+'
        STRING_1 = 'regexp:"[^"]*"'
        STRING_2 = "regexp:'[^']*'"
        NUMBER_ = 'regexp:(\+|\-)?\p{Digit}*'
        LEFT_CURLY = "{"
        RIGHT_CURLY = "}"
        LEFT_BRAC = "["
        RIGHT_BRAC = "]"
        COMMA = ","
        COLON = ":"
        TRUE = "true"
        FALSE = "false"
    ]
}

JSON ::= Value*

Value ::= Boolean | Object | Array | String | Number | null

String ::=  STRING_1 | STRING_2

Number ::= NUMBER_

Boolean ::= TRUE | FALSE

Array ::= LEFT_BRAC [Value] {COMMA Value}* RIGHT_BRAC

Object ::= LEFT_CURLY [KeyValuePair] {COMMA KeyValuePair}* RIGHT_CURLY

KeyValuePair ::= PropertyKey COLON PropertyValue

PropertyKey ::= String

PropertyValue ::= Value